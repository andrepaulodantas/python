# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/andrepaulodantas/python/blob/main/studying.ipynb
"""

from google.colab import drive
drive.mount('/content/drive')

print('-=-' * 20)
print('         QUANTIDADE DE SEGUNDOS DURANTE 24H')
print('-=-' * 20)
seconds_in_a_day = 24 * 60 * 60
seconds_in_a_day

print('-=-' * 20)
print('         TRANSFORMAÇÃO DE TEMPERATURA DE °F PARA °C')
print('-=-' * 20)
c = float(input('Informe a temperatura em ºC: '))
f = ((9 * c) / 5 ) + 32
print('A temperatura de {}ºC correspondente a {}ºF'.format(c, f))

print('-=-' * 20)
print('         ALUGUEL DE CARROS')
print('-=-' * 20)
dias = int(input('Quantos dias alugados? '))
km = float(input('Qunatos km rodados? '))
pago = (dias * 60) + (km * 0.15)
print('O total a pagar é de R${:.2f}'.format(pago)) #duas casas décimais :.2f

import math 
num = int(input('Digite um número: '))
raiz = math.sqrt(num)
print('A raiz de {} é igual a {:.2f}'.format(num, raiz))

import math 
num = float(input('Digite um número: '))
print('O valor digitado foi {} é a sua parte inteira é {}'.format(num, math.trunc(num)))

import random
n1 = str(input('Primeiro Aluno: '))
n2 = str(input('Segundo Aluno: '))
n3 = str(input('Terceiro Aluno: '))
n4 = str(input('Quarto Aluno: '))
lista = [n1, n2, n3, n4]
escolhido = random.choice(lista)
print('O aluno escolhido foi {}'.format(escolhido))

import random
n1 = str(input('Primeiro Aluno: '))
n2 = str(input('Segundo Aluno: '))
n3 = str(input('Terceiro Aluno: '))
n4 = str(input('Quarto Aluno: '))
lista = [n1, n2, n3, n4]
random.shuffle(lista)
print('O aluno escolhido foi ')
print(lista)

frase = ('André Paulo!')

print(frase.split())

print(frase.count('o',0,12))

print('-'.join(frase))

nome = str(input('Digite seu nome completo: ')).strip()
print('Seu nome tem ao todo {} letras'.format(len(nome) - nome.count(' ')))
print('Seu primeiro nome tem {} letras'.format(nome.find(' ')))

seconds_in_a_week = 7 * seconds_in_a_day
seconds_in_a_week

frase = str(input('Digite uma frase: ')).upper().strip() #retira espaços indesejados
print('A letra A aparece {} vezes na frase.'. format(frase.count('A')))
print('A primeira letra A aparece na posição {}'. format(frase.find('A')+1))
print('A última letra A apareceu na posição {}'. format(frase.rfind('A')+1))

n = str(input('Digite seu nome completo ')).strip() #retira espaços indesejados
nome = n.split() #divide as plavras achadas no input
print('Muito prazer em te conhecer!')
print('Seu primeiro nome é {}'.format(nome[0]))
print('Seu último nome é {}'.format(nome[len(nome)-1]))

from random import randint
from time import sleep
pc = randint(0, 5) #Faz o PC gerar números aleatórios
print('-=-' * 20)
print('Vou pensar em um número entre 0 e 5. Tente adivinhar...')
print('-=-' * 20)
jogador = int(input('Em que número eu pensei? ')) #Jogador tenta adivinhar
print('PROCESSANDO...')
sleep(3)
if jogador == pc:
  print('PARABÉNS! Você conseguiu me vencer!')
else:
  print('GANHEI! Eu pensei no número {} e não no {}!'.format(pc, jogador))

num = int(input('Me diga um número inteiro: '))
resultado = num % 2
if resultado == 0:
  print('O número {} é PAR'.format(num))
else:
  print('O número {} é ÍMPAR'.format(num))

dist = float(input('Qual é a distância de sua viagem? '))
print('Você está prestes a começar uma viagem de {}km.'.format(dist))
if dist <= 200:
  preço = dist * 0.50
else:
  preço = dist * 0.45
print('E o preço da sua passagem será de R${:.2f}'.format(preço))

from datetime import date
ano = int(input('Que ano quer analisar? Coloque 0 para analisar o ano atual: '))
if ano == 0:
  ano = date.today().year
if ano % 4 == 0 and ano % 100 != 0 or ano % 400 == 0:
  print('O ano {} é BISSEXTO'.format(ano))
else:
  print('O ano {} NÃO é BISSEXTO'.format(ano))

a = int(input('Primeiro valor: '))
b = int(input('Segundo valor: '))
c = int(input('Terceiro valor: '))
# Verificando quem é menor
menor = a 
if b<a and b<c:
  menor = b
if c<a and c<b:
  menor = c 
# Verificando quem é maior
maior = a 
if b>a and b>c:
  maior = b
if c>a and c>b:
  maior = c 

print('O menor valor digitado foi {}'.format(menor))
print('O maior valor digitado foi {}'.format(maior))

salário = float(input('Qual é o salário do funcionário? R$'))
if salário <= 1250:
  novo = salário + (salário * 15 /100)
else:
  novo = salário + (salário * 10 /100)
print('Quem ganhava R${:.2f} passa a ganhar R$ {:.2F} agora.'.format(salário, novo))

nome = 'CMASM'
cores = {'limpa':'\033[m',
       'azul':'\033][34m',
       'amarelo':'\033[33m',
       'pretoebranco':'\033[7;30m'}

print('Olá! Muito prazer em te conhecer, {}{}{}!!'.format(cores['pretoebranco'], nome, cores ['limpa']))  

print('-='*20)
print('Analisador de Triângulos')
print('-='*20)

casa = float(input('Valor da casa: R$'))
salário = float(input('Salário do comprador: R$'))
anos = int(input('Quantos anos de financiamento? '))
prestação = casa /(anos * 12)
mínimo = salário * 30 / 100 #aprestação mensal, não pode execeder 30% do salário
print('Para pagar uma casa de R${:.2f} em {} anos'.format(casa, anos), end='') #end é para concatenar 
print(' a prestação será de R${:.2f}'.format(prestação))
if prestação <= mínimo:
  print('Empréstimo pode ser CONCEDIDO!')
else:
  print('Empréstimo NEGADO!')

from time import sleep
num = int(input('Digite um número inteiro: '))
print('''Escolha uma das bases para conversão:
[ 1 ] converter para BINÁRIO
[ 2 ] converter para OCTAL
[ 3 ] converter para HEXADECIMAL''')

opção = int(input('Sua opção: '))

print('PROCESSANDO...')
sleep(2)

if opção == 1:
  print('{} convertido para BINÁRIO é igual a {}'.format(num, bin(num)[2:])) #pega so duas strings após o resultado
elif opção == 2:
  print('{} convertido para OCTAL é igual a {}'.format(num, oct(num)[2:])) 
elif opção == 3:
  print('{} convertido para HEXADECIMAL é igual a {}'.format(num, hex(num)[2:])) #pega so duas strings após o resultado
else:
  print('Opção inválida. Tente novamente.')

peso = float(input('Qual é seu peso? (Kg) '))
altura = float(input('Qual é seu altura? (m) '))
imc = peso / (altura ** 2)
print('O IMC dessa pessoa é de {:.1f}'.format(imc))
if imc < 18.5:
  print('Você está abaixo do peso normal')
elif 18.5 <= imc < 25:
  print('Parabéns, você está na faixa de peso normal')
elif 25 <= imc < 30:
  print('Você está em SOBREPESO')
elif 30 <= imc < 40:
  print('Você está OBESO')
else:
  print('Você está com OBESESIDADE MÓRBIDA, CUIDADO!')

from time import sleep
print ('{:=^40}'.format('LOJAS ARAÚJO'))
num = int(input('Preço das compras: R$ '))
juros2x = num + (num * 5 / 100)
juros3x = num + (num * 9 / 100)
print('''FORMAS DE PAGAMENTO
[ 1 ] à vista dinheiro/cheque
[ 2 ] à vista cartão
[ 3 ] 2X no cartão com juros de 5%
[ 4 ] 3X no cartão com juros de 9% ''')

opção = int(input('Qual sua opção? '))

print('PROCESSANDO...')
sleep(2)

if opção == 1:
  print('Sua compra foi de {:.2f}.'.format(num)) 
elif opção == 2:
  print('Sua compra foi de {:.2f}.'.format(num)) 
elif opção == 3:
  parcela = num / 2
  print('Sua compra foi parcelada em 2X de {:.2f} com juros de 5%.'.format(parcela)) 
  print('Sua compra foi de {:.2f}. vai custar R${:.2f} no final'.format(num, juros2x)) 
elif opção == 4:
  parcela = num / 3
  print('Sua compra foi parcelada em 3X de {:.2f} com juros de 9%.'.format(parcela)) 
  print('Sua compra foi de {:.2f}. vai custar R${:.2f} no final'.format(num, juros3x)) 
else:
  print('Opção inválida. Tente novamente.')

print('-=-' * 10)
print('         TABUADA')
print('-=-' * 10)
num = int(input('Digite um número para ver a sua tabuada: '))
for c in range(1, 11):
  print('{} x {:2} = {}'.format(num, c, num*c))

print('-=-' * 10)
print('     10 TERMOS DE UMA PA')
print('-=-' * 10)
primeiro = int(input('Primeiro termo: '))
razão = int(input('Razão: '))
décimo = primeiro + (10 - 1) * razão
for c in range (primeiro, décimo + razão, razão):
  print('{}'.format(c), end='-> ')
print('ACABOU')

import urllib.request
import pandas as pd
import json
import ast
import datetime
from datetime import timedelta

def getBTCData(start_date: str = None, end_date: str = None):
    '''
    Função que obtem os dados históricos do Bitcoin. 
    Args -
    start_date : Str - String ('Ano-Mês-dia') contendo a data de início da série histórica. 
                 Default - 5 anos a menos que end_date;
    end_date : Str - String ('Ano-Mês-dia') contendo a data de fim da série histórica. 
               Default Data atual
    
    Returns:
            Pandas DataFrame. Columns = [Open, High, Low, Close, Volumne], Index = Datetime Object
    '''
    now = datetime.datetime.now().date()
    end = end_date if end_date else now.strftime('%Y-%m-%d')
    start = start_date if start_date else (now - timedelta(days=1826)).strftime('%Y-%m-%d')
    url = f"https://data.messari.io/api/v1/assets/bitcoin/metrics/price/time-series?start={start}&end={end}&interval=1d"
    data_dict = urllib.request.urlopen(url).read()
    data_dict = json.loads(data_dict.decode("utf-8"))
    df = pd.DataFrame(data_dict['data']['values'], columns = data_dict['data']['parameters']['columns'])
    df['timestamp'] = pd.to_datetime(df['timestamp'], unit = "ms")
    df.set_index('timestamp', inplace=True)
    return df

if __name__ == "__main__":
    dados_bitcoin = getBTCData()
    print(dados_bitcoin.sample(5))

num = int (input('Digite umm número:: '))
tot = 0
for c in range (1, num + 1):
  if num % c == 0:
    print('\033[33m', end='')
    tot += 1
  else:
    print('\033[31m', end='')
  print('{} '.format(c), end='')
print('\n\033[32m O número {} foi divisível {} vezes'.format(num, tot))
if tot == 2:
  print('\033[35m E por isso ele É PRIMO!')
else:
  print('\033[36m E por isso ele NÃO É PRIMO!')

print('-=-' * 6)
print('    PALÍNDROMO')
print('-=-' * 6)
frase = str(input('Digite uma frase: ')).strip().upper()
palavras = frase.split()
junto = ''.join(palavras)
print('Você digitou a frase {}'.format(junto))
inverso = ''
for letra in range(len(junto) -1, -1, -1):
  inverso += junto[letra]
print('O inverso de {} é {}'.format(junto, inverso))
if inverso == junto:
  print('\033[36m Temos um palíndromo!')
else:
  print('\033[36m A frase digitada não é um palíndromo')

print('-=-' * 6)
print('    MAIORIDADE')
print('-=-' * 6)
from datetime import date
atual = date.today().year
totmaior = 0
totmenor = 0
for pessoa in range(1, 4):
  nasc = int(input('Em que ano a {} pessoa nasceu? '.format(pessoa)))
  idade = atual - nasc
  if idade >= 21:
    totmaior += 1
    print('\033[36m Essa pessoa é maior de idade')
  else:
    totmenor += 1
    print('\033[30m Essa pessoa é menor de idade')
print ('Ao todo tivemos {} pessoas maiores de idade'.format(totmaior))
print ('Ao todo tivemos {} pessoas maiores de idade'.format(totmenor))

print('-=-' * 6)
print('    MAIOR PESSO')
print('-=-' * 6)

maior = 0
menor = 0
for p in range(1,6):
  peso = float(input('Peso da {} pessoa: '.format(p)))
  if p == 1:
    maior = peso
    menor = peso
     
  else:
    if peso > maior:
      maior = peso
    if peso < menor:
      menor = peso

print('O menor valor digitado foi {}kg'.format(menor))
print('O maior valor digitado foi {}kg'.format(maior))

print('-=-' * 10)
print('  COLETA DE DADOS PESSOAIS')
print('-=-' * 10)

somaidade = 0
médiaidade = 0
maioridadehomem = 0
nomevelho = 0
totmulher20 = 0
for p in range(1,5):
  print('------ {}ª PESSOA ------'.format(p))
  nome = str(input('Nome: ')).strip()
  idade = int(input('Idade: '))
  sexo = str(input('Sexo [M/F]: ')).strip()
  somaidade += idade
  if p == 1 and sexo in 'Mm':
    maioridadehomem = idade
    nomevelho = nome
  if sexo in 'Mm' and idade > maioridadehomem:
    maioridadehomem = idade
    nomevelho = nome
  if sexo in 'Ff' and idade < 20:
    totmulher20 += 1
médiadade = somaidade / 4

print('A média de idade do grupo é de {} anos'.format(médiadade))
print('O homem mais velho tem {} anos e se chama {}'.format(maioridadehomem, nomevelho))
print('Ao todo são {} mulheres com menos de 20 anos'.format(totmulher20))

print('-=-' * 10)
print('  VALIDAÇÃO DE DADOS')
print('-=-' * 10)

for p in range(1, 10):
  sexo = str(input('Informe seu Sexo [M/F]: ')).strip()
  if sexo in 'Mm' or sexo in 'Ff':
    print('Sexo {} registrado com sucesso'.format(sexo))
  else:
    print('Dados inválidos. Por favor, informe seu sexo {}'.format(sexo))

sexo = str(input('Informe seu Sexo [M/F]: ')).strip()
while sexo not in 'MmFf':
  sexo = str(input('Dados inválidos. Por favor, informe seu sexo :')).strip()
print('Sexo {} registrado com sucesso'.format(sexo))

print('-=-' * 10)
print('  JOGO DE ADIVINHAR')
print('-=-' * 10)

from random import randint
from time import sleep
pc = randint(0, 10) #Faz o PC gerar números aleatórios
print('Sou seu computador...')
print('-=-' * 20)
print('Acabei de pensar em um número entre 0 e 10. Tente adivinhar...')
print('-=-' * 20)
print('Será que você consegue adivinhar qual foi?')
acertou = False
palpites = 0
while not acertou:
  jogador = int(input('Qual seu palpite? ')) #Jogador tenta adivinhar
  palpites += 1
  print('PROCESSANDO...')
  sleep(3)
  if jogador == pc:
    acertou = True
    print('PARABÉNS! Você conseguiu me vencer! eu pensei em {} e você também!'.format(pc))
  elif jogador >= pc: 
    print('Menos... Tente mais uma vez.')
  elif jogador <= pc:
    print('Mais... Tente mais uma vez.')
print('Parabéns, acertou com {} tentativas'.format(palpites))

print('-=-' * 10)
print('  Menu de Opções')
print('-=-' * 10)
from time import sleep
print ('{:=^40}'.format('ARAÚJO'))
primeiro = int(input('Primeiro valor:  '))
segundo = int(input('Segundo valor:  '))
opção = 0
while opção != 5:
  print('''ITENS
      [ 1 ] somar
      [ 2 ] multiplicar
      [ 3 ] maior
      [ 4 ] novos números
      [ 5 ] sair do programa ''')
  opção = int(input('Qual sua opção? '))
  print('PROCESSANDO...')
  sleep(2)

        #  print('Opção inválida. Tente novamente.')
  if opção == 1:
                  somar = primeiro + segundo
                  print('A soma foi {:.2f}.'.format(somar)) 
  elif opção == 2:
                  mult = primeiro * segundo
                  
                  print('A mult foi {:.2f}.'.format(mult)) 
  elif opção == 3:
                  # Verificando quem é maior
                  if segundo >= primeiro:
                      segundo = segundo
                      print('O segundo número é {:.2f} e é maior que o primeiro'.format(segundo))
                  # Verificando quem é menor
                  elif primeiro >= segundo:
                      primeiro = primeiro
                      print('O primeiro número é {:.2f} e é maior que o segundo'.format(primeiro))
  elif opção == 4:
              primeiro = int(input('Primeiro valor:  '))
              segundo = int(input('Segundo valor:  '))
  elif opção == 5:
              print('Finalizando...')
  else:
        print('Opção inválida. Tente novamente.')
print('Fim do programa! Volte sempre.')

print('-=-' * 4)
print('  FATORIAL')
print('-=-' * 4)
n = int(input('Digite um número para calcular o seu fatorial: '))
c = n 
f = 1
print('\033[32m Calculando o fatorial de {}! '.format(n), end='')
while c > 0:
  print('{}'.format(c), end='')
  print(' x ' if c > 1 else ' = ', end='') #end é para concatenar 
  f *= c # f = f * c
  c -= 1 #tirar 1 do c
print('{}'.format(f))

from math import factorial
n = int(input('Digite um número para calcular seu fatorial: '))
f = factorial(n)
print('o fatorial de {} é {:2}.'.format(n, f))

print('-=-' * 10)
print('     GERADOR DE UMA PA')
print('-=-' * 10)
primeiro = int(input('Primeiro termo: '))
razão = int(input('Razão: '))
termo = primeiro
cont = 1
while cont <= 10:
  print('{} -> '.format(termo), end='')
  termo += razão
  cont += 1
print('ACABOU')

print('-=-' * 10)
print('     GERADOR DE UMA PA')
print('-=-' * 10)
primeiro = int(input('Primeiro termo: '))
razão = int(input('Razão: '))
termo = primeiro
cont = 1
total = 0
mais = 10
while mais != 0:
  total = total + mais
  while cont <= total:
    print('{} -> '.format(termo), end='')
    termo += razão
    cont += 1
  print ('PAUSA')
  mais =  int(input('Quantos termos você quer mostrar a mais? '))
print(f'Progressão finalizada com {total} termos mostrados')

print('-=-' * 10)
print('     Sequência de Fibonacci')
print('-=-' * 10)
n = int(input('Que termo deseja encontrar: '))
t1 = 1
t2 = 1
print(f'{t1} -> {t2}', end='')
cont = 3
while cont <= n:
      t3 = t1 + t2
      print(f' -> {t3}', end='')
      t1 = t2
      t2 = t3
      cont += 1
print(' -> FIM')

print('-=-' * 10)
print('     Condição de parada')
print('-=-' * 10)
n = soma = cont = 0
while n != 999:
    n = int(input('Digite um número [coloque 999 para parar]: '))
    soma += n
    cont += 1  #quantidade de números que você digitou
print(f'Você digitou {cont - 1} números e a soma entre eles foi {soma - 999}')

fim = int(input('Digite o último número a imprimir: '))
x = 0
while x <= fim:
  # if x % 2 == 0:
  print(x)
  x += 2

x = 1
soma = 0
while x <= 5:
  n = int(input('Digite o número: '))
  soma += n
  x += 1
print(f'Média: {soma / 5:5.2f}')
print(f'Você tentou {x - 1} vezes')

s = 0
while True:
  v = int(input('Digite um número a somar ou 0 para sair: '))
  if v == 0:
    break
  s += v
print(f'A soma foi de {s:5.2f}')

print('-=-' * 10)
print('     Contagem de cédulas')
print('-=-' * 10)
valor = float(input("Digite o valor a pagar: "))
print(f'Total a pagar R${nota} ')
cédulas = 0
atual = 100
apagar = valor
while True:
    if atual <= apagar:
        apagar -= atual
        cédulas += 1
    else:
        if atual >= 1:
            print(f"{cédulas} cédula(s) de R${atual:5.2f}")
        else:
            print(f"{cédulas} moeda(s) de R${atual:5.2f}")
        if apagar < 0.01:
            break
        elif atual == 100:
            atual = 50
        elif atual == 50:
            atual = 20
        elif atual == 20:
            atual = 10
        elif atual == 10:
            atual = 5
        elif atual == 5:
            atual = 1
        elif atual == 1:
            atual = 0.50
        elif atual == 0.50:
            atual = 0.10
        elif atual == 0.10:
            atual = 0.05
        elif atual == 0.05:
            atual = 0.02
        elif atual == 0.02:
            atual = 0.01
        elif atual == 0.01:
            atual = 0.00
        cédulas = 0

print('-=-' * 13)
print(' Cálculo da média com notas digitadas')
print('-=-' * 13)
notas = [0, 0, 0, 0, 0] #criação de uma lista
soma = 0
x = 0
while x < 5:
  notas[x] = float(input(f'Nota {x}: ')) #insere notas em uma lista x
  soma += notas[x] #soma = soma + notas[x]
  x += 1 # x = x + 1
x = 0 # reinia x para 0
while x < 5:
  print(f'Nota {x}: {notas[x]:5.2f}')
  x += 1
print(f'\033[32mMédia:{soma / x:5.2f}') #cálcula a média

print('-=-' * 10)
print('   Apresentação de números')
print('-=-' * 10)
números = [0, 0, 0, 0, 0]
x = 0
while x < 5:
  números[x] = int(input(f'Número {x + 1}: 
  '))
  x += 1
  while True:
    escolhido = int(input('Digite posição que você quer imprimir (0 para sair): '))
    if escolhido == 0:
      break
    print(f'Você escolheu o número: {números[escolhido - 1]}')

print('-=-' * 10)
print('    Maior e menor valores')
print('-=-' * 10)
resp = 'S'
num = média = maior = menor = quant = 0
while resp in 'Ss':
    num = int(input('Digite um número: '))
    soma += num
    quant += 1
    if quant == 1:
      maior = menor = num
    else:
      if num > maior:
        maior = num
      if num < menor:
        menor = num
    resp = str(input('Você quer continuar? [S/N] ')).upper().strip()[0] #Joga para maiuscula, depois retira os espaços e só considera a prima letra [0]
média = soma / quant
print(f'Você digitou {quant} números e a média foi \033[32m{média:5.2f}') #cálcula a média 
print(f'O maior valor foi {maior} e o menor foi {menor}')

print('-=-' * 10)
print('     Condição de parada')
print('-=-' * 10)
n = soma = cont = 0
while True:
    n = int(input('Digite um número [coloque 999 para parar]: '))
    if n == 999:
      break
    soma += n
    cont += 1  #quantidade de números que você digitou
print(f'Você digitou {cont} números e a soma entre eles foi {soma}')

while True:
  n = int(input('Quer ver a tabuada de qual valor? '))
  if n < 0:
    break
  print ('_' * 33)
  for c in range (1,11):
    print(f'{n} x {c} = {n*c}')
  print ('_' * 33)
print('Programa tabuada encerrado. Volte sempre!!!!')

from random import randint
print('-=-' * 10)
print('     Jogo do Par ou Ímpar')
print('-=-' * 10)
cont = num = pc = 0
while True:
  num = int(input('Diga um valor: '))
  pc = randint(0, 10)
  total = num + pc
  tipo = ' '
  while tipo not in 'PI':
     tipo = str(input('Par ou ímpar? [P/I] ')).strip().upper()[0]
  print(f'Você jogou {num} e o computador {pc}. Total de {total}')
  if tipo == 'P':
    if total % 2 == 0:
      print('Você VENCEU!!!')
      cont += 1  #quantidade de números que você digitou
    else:
      print('Você PERDEU!!!')
      break
  elif tipo == 'I':
    if total % 2 == 1:
      print('Você VENCEU!!!')
      cont += 1  #quantidade de números que você digitou
    else:
      print('Você PERDEU!!!')
      break
  print('Vamos jogar novamente...')
print(f'GAME OVER! Você venceu {cont} vezes.')

print('-=-' * 10)
print('Simulação de uma fila de banco')
print('-=-' * 10)
último = 10
fila = list(range(1, último + 1)) #range gera uma sequência de elementos
while True:
  print(f'\nExistem {len(fila)} clientes na fila')
  print(f'Fila atual: {fila}')
  print('Digite F para adicionar um cliente ao fim da fila,')
  print('ou A para relizar o atendimento. S para sair.')
  operação = str(input('Operação (F, A OU S):')).strip().upper()[0]
  if operação == 'A':
    if len(fila) > 0:
      atendido = fila.pop(0) #O método pop retorna o valor do elemento e o exclui da fila
      print(f'Cliente {atendido} atendido')
    else:
      print('Fila vazia! Ninguém para atender.')
  elif operação == 'F':
      último += 1 #incrementa o ticket do novo cliente
      fila.append(último) #O append é para adicionar no fim da fila
  elif operação == 'S':
      break
  else:
      print('Operação inválida! Digite apenas F, A, ou S!')

#!wget "https://www.duckietown.org/wp-content/uploads/2018/05/duckietown_nice-1024x683.jpg" -O dt.jpg
 
from google.colab import files
uploaded = files.upload()

# np = common abbreviation for numpy
import numpy as np

# Constructing a numpy array from a list

boring_list = [1, 2, 3]
fun_array = np.array(boring_list) # Calling np.array(a_list) will cast your list into a numpy array!

# Arrays can be added, and there are tons of convenient functions to make them
ones = np.ones(3)
result = fun_array + ones + np.zeros(3)

print(result)

# What about matrices?
boring_mtx = [[1, 2], [3, 4]]
ones = np.ones((2, 2)) # (2, 2) describes the shape that I want
identity = np.eye(2) # an Identity matrix

# Numpy will cast your lists into arrays if need be
try:
    result = boring_mtx + identity 
    print(result)
except:
    print("Can I do this?")
    
# Random Sampling? No problem!
rando_mtx = np.random.random((100, 100))

# A lot of functions built in
print(np.linalg.norm(rando_mtx))

# But different behavior depending on the parameters you give it!
print(np.linalg.norm(rando_mtx, axis=0))
print(np.linalg.norm(rando_mtx, ord=2))

# Matrix Operations work exactly how you think they would
rando_mtx = np.eye(rando_mtx.shape[0]) * rando_mtx


# Or not? One big (and subtle) feature: broadcasting
rando_mtx += 1 # adding a scalar works, that's cool! 

mtx1 = np.random.random((8, 1, 7, 1))
mtx2 = np.random.random((8, 2, 1, 9))

# No error? 
res = mtx1 * mtx2 

# Does the same? 
res2 = mtx1.dot(mtx2)

print(np.array_equal(res, res2), res.shape, res2.shape)

# Big takeaway: numpy docs are your friend! Look before you write!

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
from matplotlib import pyplot as plt
import cv2

# Load in Grayscale
img = cv2.imread('./ufrn.jpg', 0)

# The underlying representation is a numpy array!
print(type(img))

plt.imshow(img)
plt.show()

img = cv2.imread('./ufrn.jpg')

plt.imshow(img)
plt.show()

# This would work normally, but it will crash the colab kernel, so don't.
# cv2.imshow('Image', img)

imgrgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(imgrgb)
plt.show()

# Or, use fun numpy functions / indexing!
imgrgb = img[:,:,::-1]
plt.imshow(imgrgb)
plt.show()

# Expanding
res = cv2.resize(imgrgb, None,fx=2, fy=2, interpolation = cv2.INTER_CUBIC)
plt.imshow(res)
plt.show()

# Shrinking
res = cv2.resize(imgrgb, None,fx=.1, fy=.1, interpolation = cv2.INTER_CUBIC)
plt.imshow(res)
plt.show()

# What are some practical constraints that have to do with image resizing?

#@title Transformation Parameters { run: "auto" }

theta_degrees = 0 #@param {type:"slider", min:0, max:360, step:10}
shift_x = 100 #@param {type:"slider", min:-100, max:100, step:2}
shift_y = 100 #@param {type:"slider", min:-100, max:100, step:2}

# We can also play around with rotations by defining our M matrix, 
# which has the form:
"""
| cos(theta) -sin(theta) tx | 
| sin(theta)  cos(theta) ty |
"""

rows, cols, _ = imgrgb.shape

radians = theta_degrees * np.pi / 180
M = [
        [np.cos(radians), -np.sin(radians), shift_x], 
        [np.sin(radians),  np.cos(radians), shift_y]
    ]

M = np.array(M)
rows += int(shift_x)
cols += int(shift_y)

res = cv2.warpAffine(imgrgb, M, (cols,rows))

plt.imshow(res)
plt.show()

# make things easier!
img = imgrgb

# Thresholding is cool
ret,thresh1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)
ret,thresh2 = cv2.threshold(img,127,255,cv2.THRESH_BINARY_INV)
ret,thresh3 = cv2.threshold(img,127,255,cv2.THRESH_TRUNC)
ret,thresh4 = cv2.threshold(img,127,255,cv2.THRESH_TOZERO)
ret,thresh5 = cv2.threshold(img,127,255,cv2.THRESH_TOZERO_INV)

titles = ['Original Image','BINARY','BINARY_INV','TRUNC','TOZERO','TOZERO_INV']
images = [img, thresh1, thresh2, thresh3, thresh4, thresh5]

for i in range(6):
    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])

plt.show()

# Blurring - smoothes the image out
blur = cv2.blur(img,(10, 10))
gblur = cv2.GaussianBlur(imgrgb,(5,5),0)

plt.imshow(img), plt.title('Original')
plt.show()
plt.imshow(blur), plt.title('Blurred')
plt.show()
plt.imshow(gblur),plt.title('Gaussian Blur')
plt.show()

import numpy as np
from matplotlib import pyplot as plt

ys = 200 + np.random.randn(100)
x = [x for x in range(len(ys))]

plt.plot(x, ys, '-')
plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)

plt.title("Sample Visualization")
plt.show()